datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rooms         RoomsOnUsers[]
  posts         Post[]
  likes         Like[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  Room          Room[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id        String         @id @default(uuid())
  name      String
  image     String?
  creator   User           @relation(fields: [creatorId], references: [id])
  creatorId String
  users     RoomsOnUsers[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  deletedAt DateTime?
}

model RoomsOnUsers {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([userId, roomId])
}

model Post {
  id          String    @id @default(uuid())
  title       String    @default("")
  description String    @default("")
  noLikes     Int       @default(0)
  noComments  Int       @default(0)
  ranking     Float
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  likes       Like[]
  depth       Int       @default(0)
  parent      Post?     @relation("children", fields: [parentId], references: [id])
  parentId    String?
  children    Post[]    @relation("children")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
}

model Like {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  value     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([userId, postId])
}
